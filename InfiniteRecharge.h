#pragma once
#include "vision/VisionPipeline.h"

#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>

namespace grip {

/**
* InfiniteRecharge class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class InfiniteRecharge : public frc::VisionPipeline {
	private:
		cv::Mat hsvThresholdOutput;
		cv::Mat cvDilateOutput;
		cv::Mat cvErodeOutput;
		std::vector<std::vector<cv::Point> > findContoursOutput;
		std::vector<std::vector<cv::Point> > filterContoursOutput;
		void hsvThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void cvDilate(cv::Mat &, cv::Mat &, cv::Point &, double , int , cv::Scalar &, cv::Mat &);
		void cvErode(cv::Mat &, cv::Mat &, cv::Point &, double , int , cv::Scalar &, cv::Mat &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void filterContours(std::vector<std::vector<cv::Point> > &, double , double , double , double , double , double , double [], double , double , double , double , std::vector<std::vector<cv::Point> > &);

		double hue[2] = {46.942446043165454, 97.48726655348048};
		double sat[2] = {126.12410071942446, 250.67062818336163};
		double val[2] = {4.586330935251798, 255.0};

	public:
		InfiniteRecharge();
		void Process(cv::Mat& source0) override;
		cv::Mat* GetHsvThresholdOutput();
		cv::Mat* GetCvDilateOutput();
		cv::Mat* GetCvErodeOutput();
		std::vector<std::vector<cv::Point> >* GetFindContoursOutput();
		std::vector<std::vector<cv::Point> >* GetFilterContoursOutput();

        void setHue(double low, double high) {
            hue[0] = low;
            hue[1] = high;
        }

        void setSaturation(double low, double high) {
            sat[0] = low;
            sat[1] = high;
        }

        void setValue(double low, double high) {
            val[0] = low;
            val[1] = high;
        }

        double* getHue() { return hue; }
        double* getSaturation() { return sat; }
        double* getValue() { return val; }
};


} // end namespace grip


