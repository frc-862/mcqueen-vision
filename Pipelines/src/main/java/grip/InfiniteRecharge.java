package grip;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

/**
* InfiniteRecharge class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class InfiniteRecharge {

	//Pipeline values for cv methods
	private HashMap<String, Object> params = new HashMap<>();

	//Is pipeline mutable
	private boolean isMutable = true;
	
	/**
	 * Initilize pipeline value
	 * @param name name of value
	 * @param val 
	 */
	public void initParam(String name, Object val) {
		params.put(name, val);
	}

	/**
	 * Accessor for single parameter
	 * @param name name of parameter
	 * @return {@code Object} with parameter value
	 */
	public Object getParam(String name) {
		if(isMutable) updateParams();
		return params.get(name);
	}

	/**
	 * Accessor for all parameter names
	 * @return {@code Set<String>} of all parameter names
	 */
	public Set<String> getParamNames() {
		return params.keySet();
	}

	//Outputs
	private Mat hsvThresholdOutput = new Mat();
	private Mat cvDilateOutput = new Mat();
	private Mat cvErodeOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();

	
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	//Pipeline JSON name
	private static final String configFile = "InfiniteRechargeParams.json";
	
	//Pipeline JSON root directory
	private static final String configDir = "/home/pi/pipeline-params/";
	
	//Full Pipeline JSON file path
	private static final String configFPath = configDir + configFile;

	/**
	 * This is a method that will retrieve updated pipeline values from the pipeline's JSON file
	 */
	private void updateParams() {
		Path fpath = Paths.get(configFPath);
		JsonElement top;
		try {
			//Read JSON
			top = new JsonParser().parse(Files.newBufferedReader(fpath));
			if(!top.isJsonObject()) {
				Files.deleteIfExists(fpath);
				throw new IOException();
			}
			JsonObject obj = top.getAsJsonObject();
			//Set Parameter Map To Values in JSON
			this.params = new Gson().fromJson(obj, HashMap.class);
		} catch(IOException ioe) {
			System.out.println("Could not update pipeline parameters");
			this.isMutable = false;
		}
	}

	/**
	 * Default constructor sets pipeline to mutable by default
	 */
	public InfiniteRecharge() { this(true); }

	/**
	 * Constructor 
	 */
	public InfiniteRecharge(boolean isMutable) {

		//JSON path
		Path fpath = Paths.get(configFPath);

		//JSON dir
        Path fdir = Paths.get(configDir);

		//Is pipeline mutable
		this.isMutable = isMutable;

		//Read JSON
		JsonElement top;
		try {
			top = new JsonParser().parse(Files.newBufferedReader(fpath));
			if(!top.isJsonObject()) {
				Files.deleteIfExists(fpath);
				throw new IOException();
			}
			JsonObject obj = top.getAsJsonObject();
			//Set Parameter Map To Values in JSON
			this.params = new Gson().fromJson(obj, HashMap.class);
		} catch(IOException ioe) {
			//If JSON does not exist
			try {
				//Init default pipeline values
				initParam("cvDilateIterations", 3.0);
				initParam("cvErodeIterations", 1.0);
				initParam("findContoursExternalOnly", false);
				initParam("filterContoursMinArea", 300.0);
				initParam("filterContoursMinPerimeter", 0.0);
				initParam("filterContoursMinWidth", 0.0);
				initParam("filterContoursMaxWidth", 1000.0);
				initParam("filterContoursMinHeight", 20.0);
				initParam("filterContoursMaxHeight", 1000.0);
				initParam("filterContoursMaxVertices", 1000.0);
				initParam("filterContoursMinVertices", 0.0);
				initParam("filterContoursMinRatio", 0.0);
				initParam("filterContoursMaxRatio", 1000.0);
				//Create JSON dir/file
				if(!Files.isDirectory(fdir)) Files.createDirectory(fdir);
                if(!Files.exists(fpath)) Files.createFile(fpath);
				//Write default values
				Files.write(fpath, new Gson().toJson(this.params).getBytes(StandardCharsets.UTF_8));
			} catch (Exception e) {
				System.out.println("New File Could Not Be Created - Pipeline Will Continue Running");
			}
		}

	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
		double[] hsvThresholdHue = {53.33222038831282, 117.19838667161738};
		double[] hsvThresholdSaturation = {107.89925852662877, 250.706766512382};
		double[] hsvThresholdValue = {40.19264448336252, 255.0};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step CV_dilate0:
		Mat cvDilateSrc = hsvThresholdOutput;
		Mat cvDilateKernel = new Mat();
		Point cvDilateAnchor = new Point(-1, -1);
		double cvDilateIterations = (double) getParam("cvDilateIterations");
		int cvDilateBordertype = Core.BORDER_CONSTANT;
		Scalar cvDilateBordervalue = new Scalar(-1);
		cvDilate(cvDilateSrc, cvDilateKernel, cvDilateAnchor, cvDilateIterations, cvDilateBordertype, cvDilateBordervalue, cvDilateOutput);

		// Step CV_erode0:
		Mat cvErodeSrc = cvDilateOutput;
		Mat cvErodeKernel = new Mat();
		Point cvErodeAnchor = new Point(-1, -1);
		double cvErodeIterations = (double) getParam("cvErodeIterations");
		int cvErodeBordertype = Core.BORDER_CONSTANT;
		Scalar cvErodeBordervalue = new Scalar(-1);
		cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue, cvErodeOutput);

		// Step Find_Contours0:
		Mat findContoursInput = cvErodeOutput;
		boolean findContoursExternalOnly = (boolean) getParam("findContoursExternalOnly");
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = (double) getParam("filterContoursMinArea");
		double filterContoursMinPerimeter = (double) getParam("filterContoursMinPerimeter");
		double filterContoursMinWidth = (double) getParam("filterContoursMinWidth");
		double filterContoursMaxWidth = (double) getParam("filterContoursMaxWidth");
		double filterContoursMinHeight = (double) getParam("filterContoursMinHeight");
		double filterContoursMaxHeight = (double) getParam("filterContoursMaxHeight");
		double[] filterContoursSolidity = {0, 100};
		double filterContoursMaxVertices = (double) getParam("filterContoursMaxVertices");
		double filterContoursMinVertices = (double) getParam("filterContoursMinVertices");
		double filterContoursMinRatio = (double) getParam("filterContoursMinRatio");
		double filterContoursMaxRatio = (double) getParam("filterContoursMaxRatio");
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);

	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_dilate.
	 * @return Mat output from CV_dilate.
	 */
	public Mat cvDilateOutput() {
		return cvDilateOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * @return Mat output from CV_erode.
	 */
	public Mat cvErodeOutput() {
		return cvErodeOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}


	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param output The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Expands area of higher value in an image.
	 * @param src the Image to dilate.
	 * @param kernel the kernel for dilation.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the dilation.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvDilate(Mat src, Mat kernel, Point anchor, double iterations,
	int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null){
			borderValue = new Scalar(-1);
		}
		Imgproc.dilate(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
	}

	/**
	 * Expands area of lower value in an image.
	 * @param src the Image to erode.
	 * @param kernel the kernel for erosion.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the erosion.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvErode(Mat src, Mat kernel, Point anchor, double iterations,
		int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
		Imgproc.erode(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 * @param type The Transform.
	 * @param maskSize the size of the mask.
	 * @param output The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	/**
	 * Filters out contours that do not meet certain criteria.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param minWidth minimum width of a contour
	 * @param maxWidth maximum width
	 * @param minHeight minimum height
	 * @param maxHeight maximimum height
	 * @param Solidity the minimum and maximum solidity of a contour
	 * @param minVertexCount minimum vertex Count of the contours
	 * @param maxVertexCount maximum vertex Count
	 * @param minRatio minimum ratio of width to height
	 * @param maxRatio maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea,
		double minPerimeter, double minWidth, double maxWidth, double minHeight, double
		maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
		minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth) continue;
			if (bb.height < minHeight || bb.height > maxHeight) continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea) continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int)hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) continue;
			output.add(contour);
		}
	}




}

